!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=54)}([function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(13),o=e(14),i=e(13);n.TArray=i.TArray,n.TEnumType=i.TEnumType,n.TEnumLiteral=i.TEnumLiteral,n.TFunc=i.TFunc,n.TIface=i.TIface,n.TLiteral=i.TLiteral,n.TName=i.TName,n.TOptional=i.TOptional,n.TParam=i.TParam,n.TParamList=i.TParamList,n.TProp=i.TProp,n.TTuple=i.TTuple,n.TType=i.TType,n.TUnion=i.TUnion,n.array=i.array,n.enumlit=i.enumlit,n.enumtype=i.enumtype,n.func=i.func,n.iface=i.iface,n.lit=i.lit,n.name=i.name,n.opt=i.opt,n.param=i.param,n.tuple=i.tuple,n.union=i.union,n.BasicType=i.BasicType,n.createCheckers=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var e=Object.assign.apply(Object,[{},r.basicTypes].concat(t)),o={},i=0,a=t;i<a.length;i++)for(var s=a[i],f=0,c=Object.keys(s);f<c.length;f++){var l=c[f];o[l]=new u(e,s[l])}return o};var u=function(){function t(t,n,e){if(void 0===e&&(e="value"),this.suite=t,this.ttype=n,this._path=e,this.props=new Map,n instanceof r.TIface)for(var o=0,i=n.props;o<i.length;o++){var u=i[o];this.props.set(u.name,u.ttype)}this.checkerPlain=this.ttype.getChecker(t,!1),this.checkerStrict=this.ttype.getChecker(t,!0)}return t.prototype.setReportedPath=function(t){this._path=t},t.prototype.check=function(t){return this._doCheck(this.checkerPlain,t)},t.prototype.test=function(t){return this.checkerPlain(t,new o.NoopContext)},t.prototype.validate=function(t){return this._doValidate(this.checkerPlain,t)},t.prototype.strictCheck=function(t){return this._doCheck(this.checkerStrict,t)},t.prototype.strictTest=function(t){return this.checkerStrict(t,new o.NoopContext)},t.prototype.strictValidate=function(t){return this._doValidate(this.checkerStrict,t)},t.prototype.getProp=function(n){var e=this.props.get(n);if(!e)throw new Error("Type has no property "+n);return new t(this.suite,e,this._path+"."+n)},t.prototype.methodArgs=function(n){var e=this._getMethod(n);return new t(this.suite,e.paramList)},t.prototype.methodResult=function(n){var e=this._getMethod(n);return new t(this.suite,e.result)},t.prototype.getArgs=function(){if(!(this.ttype instanceof r.TFunc))throw new Error("getArgs() applied to non-function");return new t(this.suite,this.ttype.paramList)},t.prototype.getResult=function(){if(!(this.ttype instanceof r.TFunc))throw new Error("getResult() applied to non-function");return new t(this.suite,this.ttype.result)},t.prototype.getType=function(){return this.ttype},t.prototype._doCheck=function(t,n){if(!t(n,new o.NoopContext)){var e=new o.DetailContext;throw t(n,e),e.getError(this._path)}},t.prototype._doValidate=function(t,n){if(t(n,new o.NoopContext))return null;var e=new o.DetailContext;return t(n,e),e.getErrorDetail(this._path)},t.prototype._getMethod=function(t){var n=this.props.get(t);if(!n)throw new Error("Type has no property "+t);if(!(n instanceof r.TFunc))throw new Error("Property "+t+" is not a method");return n},t}();n.Checker=u},function(t,n,e){var r=e(17)();t.exports=r},function(t,n){t.exports=function(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){t.exports=function(t){return t}},function(t,n,e){var r=e(28),o=e(29),i=e(4);t.exports=function(t){return t&&t.length?r(t,i,o):void 0}},function(t,n,e){var r=e(7),o=e(24);t.exports=function(t){return null!=t&&o(t.length)&&!r(t)}},function(t,n,e){var r=e(8),o=e(2),i="[object AsyncFunction]",u="[object Function]",a="[object GeneratorFunction]",s="[object Proxy]";t.exports=function(t){if(!o(t))return!1;var n=r(t);return n==u||n==a||n==i||n==s}},function(t,n,e){var r=e(9),o=e(22),i=e(23),u="[object Null]",a="[object Undefined]",s=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?a:u:s&&s in Object(t)?o(t):i(t)}},function(t,n,e){var r=e(10).Symbol;t.exports=r},function(t,n,e){var r=e(21),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();t.exports=i},function(t,n,e){var r=e(8),o=e(12),i="[object Symbol]";t.exports=function(t){return"symbol"==typeof t||o(t)&&r(t)==i}},function(t,n){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,n,e){"use strict";(function(t){var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0});var i=e(14),u=function(){};function a(t){return"string"==typeof t?f(t):t}function s(t,n){var e=t[n];if(!e)throw new Error("Unknown type "+n);return e}function f(t){return new c(t)}n.TType=u,n.name=f;var c=function(t){function n(n){var e=t.call(this)||this;return e.name=n,e._failMsg="is not a "+n,e}return o(n,t),n.prototype.getChecker=function(t,e){var r=this,o=s(t,this.name),i=o.getChecker(t,e);return o instanceof E||o instanceof n?i:function(t,n){return!!i(t,n)||n.fail(null,r._failMsg,0)}},n}(u);n.TName=c,n.lit=function(t){return new l(t)};var l=function(t){function n(n){var e=t.call(this)||this;return e.value=n,e.name=JSON.stringify(n),e._failMsg="is not "+e.name,e}return o(n,t),n.prototype.getChecker=function(t,n){var e=this;return function(t,n){return t===e.value||n.fail(null,e._failMsg,-1)}},n}(u);n.TLiteral=l,n.array=function(t){return new h(a(t))};var h=function(t){function n(n){var e=t.call(this)||this;return e.ttype=n,e}return o(n,t),n.prototype.getChecker=function(t,n){var e=this.ttype.getChecker(t,n);return function(t,n){if(!Array.isArray(t))return n.fail(null,"is not an array",0);for(var r=0;r<t.length;r++){if(!e(t[r],n))return n.fail(r,null,1)}return!0}},n}(u);n.TArray=h,n.tuple=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new p(t.map(function(t){return a(t)}))};var p=function(t){function n(n){var e=t.call(this)||this;return e.ttypes=n,e}return o(n,t),n.prototype.getChecker=function(t,n){var e=this.ttypes.map(function(e){return e.getChecker(t,n)}),r=function(t,n){if(!Array.isArray(t))return n.fail(null,"is not an array",0);for(var r=0;r<e.length;r++){if(!e[r](t[r],n))return n.fail(r,null,1)}return!0};return n?function(t,n){return!!r(t,n)&&(t.length<=e.length||n.fail(e.length,"is extraneous",2))}:r},n}(u);n.TTuple=p,n.union=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new g(t.map(function(t){return a(t)}))};var g=function(t){function n(n){var e=t.call(this)||this;e.ttypes=n;var r=n.map(function(t){return t instanceof c||t instanceof l?t.name:null}).filter(function(t){return t}),o=n.length-r.length;return r.length?(o>0&&r.push(o+" more"),e._failMsg="is none of "+r.join(", ")):e._failMsg="is none of "+o+" types",e}return o(n,t),n.prototype.getChecker=function(t,n){var e=this,r=this.ttypes.map(function(e){return e.getChecker(t,n)});return function(t,n){for(var o=n.unionResolver(),i=0;i<r.length;i++){if(r[i](t,o.createContext()))return!0}return n.resolveUnion(o),n.fail(null,e._failMsg,0)}},n}(u);n.TUnion=g,n.enumtype=function(t){return new y(t)};var y=function(t){function n(n){var e=t.call(this)||this;return e.members=n,e.validValues=new Set,e._failMsg="is not a valid enum value",e.validValues=new Set(Object.keys(n).map(function(t){return n[t]})),e}return o(n,t),n.prototype.getChecker=function(t,n){var e=this;return function(t,n){return!!e.validValues.has(t)||n.fail(null,e._failMsg,0)}},n}(u);n.TEnumType=y,n.enumlit=function(t,n){return new d(t,n)};var d=function(t){function n(n,e){var r=t.call(this)||this;return r.enumName=n,r.prop=e,r._failMsg="is not "+n+"."+e,r}return o(n,t),n.prototype.getChecker=function(t,n){var e=this,r=s(t,this.enumName);if(!(r instanceof y))throw new Error("Type "+this.enumName+" used in enumlit is not an enum type");var o=r.members[this.prop];if(!r.members.hasOwnProperty(this.prop))throw new Error("Unknown value "+this.enumName+"."+this.prop+" used in enumlit");return function(t,n){return t===o||n.fail(null,e._failMsg,-1)}},n}(u);function v(t){return Object.keys(t).map(function(n){return function(t,n){return n instanceof w?new x(t,n.ttype,!0):new x(t,a(n),!1)}(n,t[n])})}n.TEnumLiteral=d,n.iface=function(t,n){return new m(t,v(n))};var m=function(t){function n(n,e){var r=t.call(this)||this;return r.bases=n,r.props=e,r.propSet=new Set(e.map(function(t){return t.name})),r}return o(n,t),n.prototype.getChecker=function(t,n){var e=this,r=this.bases.map(function(e){return s(t,e).getChecker(t,n)}),o=this.props.map(function(e){return e.ttype.getChecker(t,n)}),u=new i.NoopContext,a=this.props.map(function(t,n){return!t.isOpt&&!o[n](void 0,u)}),f=function(t,n){if("object"!=typeof t||null===t)return n.fail(null,"is not an object",0);for(var i=0;i<r.length;i++)if(!r[i](t,n))return!1;for(i=0;i<o.length;i++){var u=e.props[i].name,s=t[u];if(void 0===s){if(a[i])return n.fail(u,"is missing",1)}else if(!o[i](s,n))return n.fail(u,null,1)}return!0};return n?function(t,n){if(!f(t,n))return!1;for(var r in t)if(!e.propSet.has(r))return n.fail(r,"is extraneous",2);return!0}:f},n}(u);n.TIface=m,n.opt=function(t){return new w(a(t))};var w=function(t){function n(n){var e=t.call(this)||this;return e.ttype=n,e}return o(n,t),n.prototype.getChecker=function(t,n){var e=this.ttype.getChecker(t,n);return function(t,n){return void 0===t||e(t,n)}},n}(u);n.TOptional=w;var x=function(t,n,e){this.name=t,this.ttype=n,this.isOpt=e};n.TProp=x,n.func=function(t){for(var n=[],e=1;e<arguments.length;e++)n[e-1]=arguments[e];return new b(new _(n),a(t))};var b=function(t){function n(n,e){var r=t.call(this)||this;return r.paramList=n,r.result=e,r}return o(n,t),n.prototype.getChecker=function(t,n){return function(t,n){return"function"==typeof t||n.fail(null,"is not a function",0)}},n}(u);n.TFunc=b,n.param=function(t,n,e){return new T(t,a(n),Boolean(e))};var T=function(t,n,e){this.name=t,this.ttype=n,this.isOpt=e};n.TParam=T;var _=function(t){function n(n){var e=t.call(this)||this;return e.params=n,e}return o(n,t),n.prototype.getChecker=function(t,n){var e=this,r=this.params.map(function(e){return e.ttype.getChecker(t,n)}),o=new i.NoopContext,u=this.params.map(function(t,n){return!t.isOpt&&!r[n](void 0,o)}),a=function(t,n){if(!Array.isArray(t))return n.fail(null,"is not an array",0);for(var o=0;o<r.length;o++){var i=e.params[o];if(void 0===t[o]){if(u[o])return n.fail(i.name,"is missing",1)}else if(!r[o](t[o],n))return n.fail(i.name,null,1)}return!0};return n?function(t,n){return!!a(t,n)&&(t.length<=r.length||n.fail(r.length,"is extraneous",2))}:a},n}(u);n.TParamList=_;var E=function(t){function n(n,e){var r=t.call(this)||this;return r.validator=n,r.message=e,r}return o(n,t),n.prototype.getChecker=function(t,n){var e=this;return function(t,n){return!!e.validator(t)||n.fail(null,e.message,0)}},n}(u);n.BasicType=E,n.basicTypes={any:new E(function(t){return!0},"is invalid"),number:new E(function(t){return"number"==typeof t},"is not a number"),object:new E(function(t){return"object"==typeof t&&t},"is not an object"),boolean:new E(function(t){return"boolean"==typeof t},"is not a boolean"),string:new E(function(t){return"string"==typeof t},"is not a string"),symbol:new E(function(t){return"symbol"==typeof t},"is not a symbol"),void:new E(function(t){return null==t},"is not void"),undefined:new E(function(t){return void 0===t},"is not undefined"),null:new E(function(t){return null===t},"is not null"),never:new E(function(t){return!1},"is unexpected")},void 0!==t&&(n.basicTypes.Buffer=new E(function(n){return t.isBuffer(n)},"is not a Buffer"));for(var A=function(t){n.basicTypes[t.name]=new E(function(n){return n instanceof t},"is not a "+t.name)},P=0,R=[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,ArrayBuffer];P<R.length;P++){A(R[P])}}).call(this,e(50).Buffer)},function(t,n,e){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0});var i=function(t){function n(n,e){var r=t.call(this,e)||this;return r.path=n,r}return o(n,t),n}(Error);n.VError=i;var u=function(){function t(){}return t.prototype.fail=function(t,n,e){return!1},t.prototype.unionResolver=function(){return this},t.prototype.createContext=function(){return this},t.prototype.resolveUnion=function(t){},t}();n.NoopContext=u;var a=function(){function t(){this._propNames=[""],this._messages=[null],this._score=0}return t.prototype.fail=function(t,n,e){return this._propNames.push(t),this._messages.push(n),this._score+=e,!1},t.prototype.unionResolver=function(){return new s},t.prototype.resolveUnion=function(t){for(var n,e,r=null,o=0,i=t.contexts;o<i.length;o++){var u=i[o];(!r||u._score>=r._score)&&(r=u)}r&&r._score>0&&((n=this._propNames).push.apply(n,r._propNames),(e=this._messages).push.apply(e,r._messages))},t.prototype.getError=function(t){for(var n=[],e=this._propNames.length-1;e>=0;e--){var r=this._propNames[e];t+="number"==typeof r?"["+r+"]":r?"."+r:"";var o=this._messages[e];o&&n.push(t+" "+o)}return new i(t,n.join("; "))},t.prototype.getErrorDetail=function(t){for(var n=[],e=this._propNames.length-1;e>=0;e--){var r=this._propNames[e];t+="number"==typeof r?"["+r+"]":r?"."+r:"";var o=this._messages[e];o&&n.push({path:t,message:o})}var i=null;for(e=n.length-1;e>=0;e--)i&&(n[e].nested=[i]),i=n[e];return i},t}();n.DetailContext=a;var s=function(){function t(){this.contexts=[]}return t.prototype.createContext=function(){var t=new a;return this.contexts.push(t),t},t}()},function(t,n,e){var r=e(30)(e(44));t.exports=r},function(t,n,e){(function(e){var r,o,i;o=[],void 0===(i="function"==typeof(r=function(){"use strict";function n(t,n,e){var r=new XMLHttpRequest;r.open("GET",t),r.responseType="blob",r.onload=function(){u(r.response,n,e)},r.onerror=function(){console.error("could not download file")},r.send()}function r(t){var n=new XMLHttpRequest;n.open("HEAD",t,!1);try{n.send()}catch(t){}return 200<=n.status&&299>=n.status}function o(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(e){var n=document.createEvent("MouseEvents");n.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(n)}}var i="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof e&&e.global===e?e:void 0,u=i.saveAs||("object"!=typeof window||window!==i?function(){}:"download"in HTMLAnchorElement.prototype?function(t,e,u){var a=i.URL||i.webkitURL,s=document.createElement("a");e=e||t.name||"download",s.download=e,s.rel="noopener","string"==typeof t?(s.href=t,s.origin===location.origin?o(s):r(s.href)?n(t,e,u):o(s,s.target="_blank")):(s.href=a.createObjectURL(t),setTimeout(function(){a.revokeObjectURL(s.href)},4e4),setTimeout(function(){o(s)},0))}:"msSaveOrOpenBlob"in navigator?function(t,e,i){if(e=e||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,n){return void 0===n?n={autoBom:!1}:"object"!=typeof n&&(console.warn("Deprecated: Expected third argument to be a object"),n={autoBom:!n}),n.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,i),e);else if(r(t))n(t,e,i);else{var u=document.createElement("a");u.href=t,u.target="_blank",setTimeout(function(){o(u)})}}:function(t,e,r,o){if((o=o||open("","_blank"))&&(o.document.title=o.document.body.innerText="downloading..."),"string"==typeof t)return n(t,e,r);var u="application/octet-stream"===t.type,a=/constructor/i.test(i.HTMLElement)||i.safari,s=/CriOS\/[\d]+/.test(navigator.userAgent);if((s||u&&a)&&"object"==typeof FileReader){var f=new FileReader;f.onloadend=function(){var t=f.result;t=s?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),o?o.location.href=t:location=t,o=null},f.readAsDataURL(t)}else{var c=i.URL||i.webkitURL,l=c.createObjectURL(t);o?o.location=l:location.href=l,o=null,setTimeout(function(){c.revokeObjectURL(l)},4e4)}});i.saveAs=u.saveAs=u,t.exports=u})?r.apply(n,o):r)||(t.exports=i)}).call(this,e(3))},function(t,n,e){var r=e(18),o=e(19),i=e(26);t.exports=function(t){return function(n,e,u){return u&&"number"!=typeof u&&o(n,e,u)&&(e=u=void 0),n=i(n),void 0===e?(e=n,n=0):e=i(e),u=void 0===u?n<e?1:-1:i(u),r(n,e,u,t)}}},function(t,n){var e=Math.ceil,r=Math.max;t.exports=function(t,n,o,i){for(var u=-1,a=r(e((n-t)/(o||1)),0),s=Array(a);a--;)s[i?a:++u]=t,t+=o;return s}},function(t,n,e){var r=e(20),o=e(6),i=e(25),u=e(2);t.exports=function(t,n,e){if(!u(e))return!1;var a=typeof n;return!!("number"==a?o(e)&&i(n,e.length):"string"==a&&n in e)&&r(e[n],t)}},function(t,n){t.exports=function(t,n){return t===n||t!=t&&n!=n}},function(t,n,e){(function(n){var e="object"==typeof n&&n&&n.Object===Object&&n;t.exports=e}).call(this,e(3))},function(t,n,e){var r=e(9),o=Object.prototype,i=o.hasOwnProperty,u=o.toString,a=r?r.toStringTag:void 0;t.exports=function(t){var n=i.call(t,a),e=t[a];try{t[a]=void 0;var r=!0}catch(t){}var o=u.call(t);return r&&(n?t[a]=e:delete t[a]),o}},function(t,n){var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},function(t,n){var e=9007199254740991;t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=e}},function(t,n){var e=9007199254740991,r=/^(?:0|[1-9]\d*)$/;t.exports=function(t,n){var o=typeof t;return!!(n=null==n?e:n)&&("number"==o||"symbol"!=o&&r.test(t))&&t>-1&&t%1==0&&t<n}},function(t,n,e){var r=e(27),o=1/0,i=17976931348623157e292;t.exports=function(t){return t?(t=r(t))===o||t===-o?(t<0?-1:1)*i:t==t?t:0:0===t?t:0}},function(t,n,e){var r=e(2),o=e(11),i=NaN,u=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,f=/^0o[0-7]+$/i,c=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(o(t))return i;if(r(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=r(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(u,"");var e=s.test(t);return e||f.test(t)?c(t.slice(2),e?2:8):a.test(t)?i:+t}},function(t,n,e){var r=e(11);t.exports=function(t,n,e){for(var o=-1,i=t.length;++o<i;){var u=t[o],a=n(u);if(null!=a&&(void 0===s?a==a&&!r(a):e(a,s)))var s=a,f=u}return f}},function(t,n){t.exports=function(t,n){return t>n}},function(t,n,e){var r=e(4),o=e(31),i=e(33);t.exports=function(t,n){return i(o(t,n,r),t+"")}},function(t,n,e){var r=e(32),o=Math.max;t.exports=function(t,n,e){return n=o(void 0===n?t.length-1:n,0),function(){for(var i=arguments,u=-1,a=o(i.length-n,0),s=Array(a);++u<a;)s[u]=i[n+u];u=-1;for(var f=Array(n+1);++u<n;)f[u]=i[u];return f[n]=e(s),r(t,this,f)}}},function(t,n){t.exports=function(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}},function(t,n,e){var r=e(34),o=e(43)(r);t.exports=o},function(t,n,e){var r=e(35),o=e(36),i=e(4),u=o?function(t,n){return o(t,"toString",{configurable:!0,enumerable:!1,value:r(n),writable:!0})}:i;t.exports=u},function(t,n){t.exports=function(t){return function(){return t}}},function(t,n,e){var r=e(37),o=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=o},function(t,n,e){var r=e(38),o=e(42);t.exports=function(t,n){var e=o(t,n);return r(e)?e:void 0}},function(t,n,e){var r=e(7),o=e(39),i=e(2),u=e(41),a=/^\[object .+?Constructor\]$/,s=Function.prototype,f=Object.prototype,c=s.toString,l=f.hasOwnProperty,h=RegExp("^"+c.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||o(t))&&(r(t)?h:a).test(u(t))}},function(t,n,e){var r,o=e(40),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!i&&i in t}},function(t,n,e){var r=e(10)["__core-js_shared__"];t.exports=r},function(t,n){var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,n){t.exports=function(t,n){return null==t?void 0:t[n]}},function(t,n){var e=800,r=16,o=Date.now;t.exports=function(t){var n=0,i=0;return function(){var u=o(),a=r-(u-i);if(i=u,a>0){if(++n>=e)return arguments[0]}else n=0;return t.apply(void 0,arguments)}}},function(t,n,e){var r=e(45),o=e(46),i=e(47),u=e(48),a=e(49),s=Math.max;t.exports=function(t){if(!t||!t.length)return[];var n=0;return t=r(t,function(t){if(a(t))return n=s(t.length,n),!0}),u(n,function(n){return o(t,i(n))})}},function(t,n){t.exports=function(t,n){for(var e=-1,r=null==t?0:t.length,o=0,i=[];++e<r;){var u=t[e];n(u,e,t)&&(i[o++]=u)}return i}},function(t,n){t.exports=function(t,n){for(var e=-1,r=null==t?0:t.length,o=Array(r);++e<r;)o[e]=n(t[e],e,t);return o}},function(t,n){t.exports=function(t){return function(n){return null==n?void 0:n[t]}}},function(t,n){t.exports=function(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}},function(t,n,e){var r=e(6),o=e(12);t.exports=function(t){return o(t)&&r(t)}},function(t,n,e){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=e(51),o=e(52),i=e(53);function u(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,n){if(u()<n)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(n)).__proto__=s.prototype:(null===t&&(t=new s(n)),t.length=n),t}function s(t,n,e){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,n,e);if("number"==typeof t){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return f(this,t,n,e)}function f(t,n,e,r){if("number"==typeof n)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&n instanceof ArrayBuffer?function(t,n,e,r){if(n.byteLength,e<0||n.byteLength<e)throw new RangeError("'offset' is out of bounds");if(n.byteLength<e+(r||0))throw new RangeError("'length' is out of bounds");n=void 0===e&&void 0===r?new Uint8Array(n):void 0===r?new Uint8Array(n,e):new Uint8Array(n,e,r);s.TYPED_ARRAY_SUPPORT?(t=n).__proto__=s.prototype:t=h(t,n);return t}(t,n,e,r):"string"==typeof n?function(t,n,e){"string"==typeof e&&""!==e||(e="utf8");if(!s.isEncoding(e))throw new TypeError('"encoding" must be a valid string encoding');var r=0|g(n,e),o=(t=a(t,r)).write(n,e);o!==r&&(t=t.slice(0,o));return t}(t,n,e):function(t,n){if(s.isBuffer(n)){var e=0|p(n.length);return 0===(t=a(t,e)).length?t:(n.copy(t,0,0,e),t)}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||(r=n.length)!=r?a(t,0):h(t,n);if("Buffer"===n.type&&i(n.data))return h(t,n.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,n)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,n){if(c(n),t=a(t,n<0?0:0|p(n)),!s.TYPED_ARRAY_SUPPORT)for(var e=0;e<n;++e)t[e]=0;return t}function h(t,n){var e=n.length<0?0:0|p(n.length);t=a(t,e);for(var r=0;r<e;r+=1)t[r]=255&n[r];return t}function p(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function g(t,n){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var e=t.length;if(0===e)return 0;for(var r=!1;;)switch(n){case"ascii":case"latin1":case"binary":return e;case"utf8":case"utf-8":case void 0:return D(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*e;case"hex":return e>>>1;case"base64":return $(t).length;default:if(r)return D(t).length;n=(""+n).toLowerCase(),r=!0}}function y(t,n,e){var r=!1;if((void 0===n||n<0)&&(n=0),n>this.length)return"";if((void 0===e||e>this.length)&&(e=this.length),e<=0)return"";if((e>>>=0)<=(n>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,n,e);case"utf8":case"utf-8":return P(this,n,e);case"ascii":return O(this,n,e);case"latin1":case"binary":return S(this,n,e);case"base64":return A(this,n,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,n,e);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function d(t,n,e){var r=t[n];t[n]=t[e],t[e]=r}function v(t,n,e,r,o){if(0===t.length)return-1;if("string"==typeof e?(r=e,e=0):e>2147483647?e=2147483647:e<-2147483648&&(e=-2147483648),e=+e,isNaN(e)&&(e=o?0:t.length-1),e<0&&(e=t.length+e),e>=t.length){if(o)return-1;e=t.length-1}else if(e<0){if(!o)return-1;e=0}if("string"==typeof n&&(n=s.from(n,r)),s.isBuffer(n))return 0===n.length?-1:m(t,n,e,r,o);if("number"==typeof n)return n&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,n,e):Uint8Array.prototype.lastIndexOf.call(t,n,e):m(t,[n],e,r,o);throw new TypeError("val must be string, number or Buffer")}function m(t,n,e,r,o){var i,u=1,a=t.length,s=n.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||n.length<2)return-1;u=2,a/=2,s/=2,e/=2}function f(t,n){return 1===u?t[n]:t.readUInt16BE(n*u)}if(o){var c=-1;for(i=e;i<a;i++)if(f(t,i)===f(n,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===s)return c*u}else-1!==c&&(i-=i-c),c=-1}else for(e+s>a&&(e=a-s),i=e;i>=0;i--){for(var l=!0,h=0;h<s;h++)if(f(t,i+h)!==f(n,h)){l=!1;break}if(l)return i}return-1}function w(t,n,e,r){e=Number(e)||0;var o=t.length-e;r?(r=Number(r))>o&&(r=o):r=o;var i=n.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var u=0;u<r;++u){var a=parseInt(n.substr(2*u,2),16);if(isNaN(a))return u;t[e+u]=a}return u}function x(t,n,e,r){return H(D(n,t.length-e),t,e,r)}function b(t,n,e,r){return H(function(t){for(var n=[],e=0;e<t.length;++e)n.push(255&t.charCodeAt(e));return n}(n),t,e,r)}function T(t,n,e,r){return b(t,n,e,r)}function _(t,n,e,r){return H($(n),t,e,r)}function E(t,n,e,r){return H(function(t,n){for(var e,r,o,i=[],u=0;u<t.length&&!((n-=2)<0);++u)e=t.charCodeAt(u),r=e>>8,o=e%256,i.push(o),i.push(r);return i}(n,t.length-e),t,e,r)}function A(t,n,e){return 0===n&&e===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(n,e))}function P(t,n,e){e=Math.min(t.length,e);for(var r=[],o=n;o<e;){var i,u,a,s,f=t[o],c=null,l=f>239?4:f>223?3:f>191?2:1;if(o+l<=e)switch(l){case 1:f<128&&(c=f);break;case 2:128==(192&(i=t[o+1]))&&(s=(31&f)<<6|63&i)>127&&(c=s);break;case 3:i=t[o+1],u=t[o+2],128==(192&i)&&128==(192&u)&&(s=(15&f)<<12|(63&i)<<6|63&u)>2047&&(s<55296||s>57343)&&(c=s);break;case 4:i=t[o+1],u=t[o+2],a=t[o+3],128==(192&i)&&128==(192&u)&&128==(192&a)&&(s=(15&f)<<18|(63&i)<<12|(63&u)<<6|63&a)>65535&&s<1114112&&(c=s)}null===c?(c=65533,l=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),o+=l}return function(t){var n=t.length;if(n<=R)return String.fromCharCode.apply(String,t);var e="",r=0;for(;r<n;)e+=String.fromCharCode.apply(String,t.slice(r,r+=R));return e}(r)}n.Buffer=s,n.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},n.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),n.kMaxLength=u(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,n,e){return f(null,t,n,e)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,n,e){return function(t,n,e,r){return c(n),n<=0?a(t,n):void 0!==e?"string"==typeof r?a(t,n).fill(e,r):a(t,n).fill(e):a(t,n)}(null,t,n,e)},s.allocUnsafe=function(t){return l(null,t)},s.allocUnsafeSlow=function(t){return l(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,n){if(!s.isBuffer(t)||!s.isBuffer(n))throw new TypeError("Arguments must be Buffers");if(t===n)return 0;for(var e=t.length,r=n.length,o=0,i=Math.min(e,r);o<i;++o)if(t[o]!==n[o]){e=t[o],r=n[o];break}return e<r?-1:r<e?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,n){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var e;if(void 0===n)for(n=0,e=0;e<t.length;++e)n+=t[e].length;var r=s.allocUnsafe(n),o=0;for(e=0;e<t.length;++e){var u=t[e];if(!s.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(r,o),o+=u.length}return r},s.byteLength=g,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var n=0;n<t;n+=2)d(this,n,n+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var n=0;n<t;n+=4)d(this,n,n+3),d(this,n+1,n+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var n=0;n<t;n+=8)d(this,n,n+7),d(this,n+1,n+6),d(this,n+2,n+5),d(this,n+3,n+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?P(this,0,t):y.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",e=n.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,e).match(/.{2}/g).join(" "),this.length>e&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,n,e,r,o){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===e&&(e=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),n<0||e>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&n>=e)return 0;if(r>=o)return-1;if(n>=e)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),u=(e>>>=0)-(n>>>=0),a=Math.min(i,u),f=this.slice(r,o),c=t.slice(n,e),l=0;l<a;++l)if(f[l]!==c[l]){i=f[l],u=c[l];break}return i<u?-1:u<i?1:0},s.prototype.includes=function(t,n,e){return-1!==this.indexOf(t,n,e)},s.prototype.indexOf=function(t,n,e){return v(this,t,n,e,!0)},s.prototype.lastIndexOf=function(t,n,e){return v(this,t,n,e,!1)},s.prototype.write=function(t,n,e,r){if(void 0===n)r="utf8",e=this.length,n=0;else if(void 0===e&&"string"==typeof n)r=n,e=this.length,n=0;else{if(!isFinite(n))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");n|=0,isFinite(e)?(e|=0,void 0===r&&(r="utf8")):(r=e,e=void 0)}var o=this.length-n;if((void 0===e||e>o)&&(e=o),t.length>0&&(e<0||n<0)||n>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return w(this,t,n,e);case"utf8":case"utf-8":return x(this,t,n,e);case"ascii":return b(this,t,n,e);case"latin1":case"binary":return T(this,t,n,e);case"base64":return _(this,t,n,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,n,e);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var R=4096;function O(t,n,e){var r="";e=Math.min(t.length,e);for(var o=n;o<e;++o)r+=String.fromCharCode(127&t[o]);return r}function S(t,n,e){var r="";e=Math.min(t.length,e);for(var o=n;o<e;++o)r+=String.fromCharCode(t[o]);return r}function C(t,n,e){var r=t.length;(!n||n<0)&&(n=0),(!e||e<0||e>r)&&(e=r);for(var o="",i=n;i<e;++i)o+=F(t[i]);return o}function k(t,n,e){for(var r=t.slice(n,e),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function B(t,n,e){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+n>e)throw new RangeError("Trying to access beyond buffer length")}function M(t,n,e,r,o,i){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>o||n<i)throw new RangeError('"value" argument is out of bounds');if(e+r>t.length)throw new RangeError("Index out of range")}function I(t,n,e,r){n<0&&(n=65535+n+1);for(var o=0,i=Math.min(t.length-e,2);o<i;++o)t[e+o]=(n&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function U(t,n,e,r){n<0&&(n=4294967295+n+1);for(var o=0,i=Math.min(t.length-e,4);o<i;++o)t[e+o]=n>>>8*(r?o:3-o)&255}function j(t,n,e,r,o,i){if(e+r>t.length)throw new RangeError("Index out of range");if(e<0)throw new RangeError("Index out of range")}function L(t,n,e,r,i){return i||j(t,0,e,4),o.write(t,n,e,r,23,4),e+4}function Y(t,n,e,r,i){return i||j(t,0,e,8),o.write(t,n,e,r,52,8),e+8}s.prototype.slice=function(t,n){var e,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(n=void 0===n?r:~~n)<0?(n+=r)<0&&(n=0):n>r&&(n=r),n<t&&(n=t),s.TYPED_ARRAY_SUPPORT)(e=this.subarray(t,n)).__proto__=s.prototype;else{var o=n-t;e=new s(o,void 0);for(var i=0;i<o;++i)e[i]=this[i+t]}return e},s.prototype.readUIntLE=function(t,n,e){t|=0,n|=0,e||B(t,n,this.length);for(var r=this[t],o=1,i=0;++i<n&&(o*=256);)r+=this[t+i]*o;return r},s.prototype.readUIntBE=function(t,n,e){t|=0,n|=0,e||B(t,n,this.length);for(var r=this[t+--n],o=1;n>0&&(o*=256);)r+=this[t+--n]*o;return r},s.prototype.readUInt8=function(t,n){return n||B(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,n){return n||B(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,n){return n||B(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,n){return n||B(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,n){return n||B(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,n,e){t|=0,n|=0,e||B(t,n,this.length);for(var r=this[t],o=1,i=0;++i<n&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*n)),r},s.prototype.readIntBE=function(t,n,e){t|=0,n|=0,e||B(t,n,this.length);for(var r=n,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*n)),i},s.prototype.readInt8=function(t,n){return n||B(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,n){n||B(t,2,this.length);var e=this[t]|this[t+1]<<8;return 32768&e?4294901760|e:e},s.prototype.readInt16BE=function(t,n){n||B(t,2,this.length);var e=this[t+1]|this[t]<<8;return 32768&e?4294901760|e:e},s.prototype.readInt32LE=function(t,n){return n||B(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,n){return n||B(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,n){return n||B(t,4,this.length),o.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,n){return n||B(t,4,this.length),o.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,n){return n||B(t,8,this.length),o.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,n){return n||B(t,8,this.length),o.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,n,e,r){(t=+t,n|=0,e|=0,r)||M(this,t,n,e,Math.pow(2,8*e)-1,0);var o=1,i=0;for(this[n]=255&t;++i<e&&(o*=256);)this[n+i]=t/o&255;return n+e},s.prototype.writeUIntBE=function(t,n,e,r){(t=+t,n|=0,e|=0,r)||M(this,t,n,e,Math.pow(2,8*e)-1,0);var o=e-1,i=1;for(this[n+o]=255&t;--o>=0&&(i*=256);)this[n+o]=t/i&255;return n+e},s.prototype.writeUInt8=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[n]=255&t,n+1},s.prototype.writeUInt16LE=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):I(this,t,n,!0),n+2},s.prototype.writeUInt16BE=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):I(this,t,n,!1),n+2},s.prototype.writeUInt32LE=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[n+3]=t>>>24,this[n+2]=t>>>16,this[n+1]=t>>>8,this[n]=255&t):U(this,t,n,!0),n+4},s.prototype.writeUInt32BE=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):U(this,t,n,!1),n+4},s.prototype.writeIntLE=function(t,n,e,r){if(t=+t,n|=0,!r){var o=Math.pow(2,8*e-1);M(this,t,n,e,o-1,-o)}var i=0,u=1,a=0;for(this[n]=255&t;++i<e&&(u*=256);)t<0&&0===a&&0!==this[n+i-1]&&(a=1),this[n+i]=(t/u>>0)-a&255;return n+e},s.prototype.writeIntBE=function(t,n,e,r){if(t=+t,n|=0,!r){var o=Math.pow(2,8*e-1);M(this,t,n,e,o-1,-o)}var i=e-1,u=1,a=0;for(this[n+i]=255&t;--i>=0&&(u*=256);)t<0&&0===a&&0!==this[n+i+1]&&(a=1),this[n+i]=(t/u>>0)-a&255;return n+e},s.prototype.writeInt8=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[n]=255&t,n+1},s.prototype.writeInt16LE=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):I(this,t,n,!0),n+2},s.prototype.writeInt16BE=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):I(this,t,n,!1),n+2},s.prototype.writeInt32LE=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8,this[n+2]=t>>>16,this[n+3]=t>>>24):U(this,t,n,!0),n+4},s.prototype.writeInt32BE=function(t,n,e){return t=+t,n|=0,e||M(this,t,n,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):U(this,t,n,!1),n+4},s.prototype.writeFloatLE=function(t,n,e){return L(this,t,n,!0,e)},s.prototype.writeFloatBE=function(t,n,e){return L(this,t,n,!1,e)},s.prototype.writeDoubleLE=function(t,n,e){return Y(this,t,n,!0,e)},s.prototype.writeDoubleBE=function(t,n,e){return Y(this,t,n,!1,e)},s.prototype.copy=function(t,n,e,r){if(e||(e=0),r||0===r||(r=this.length),n>=t.length&&(n=t.length),n||(n=0),r>0&&r<e&&(r=e),r===e)return 0;if(0===t.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(e<0||e>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-n<r-e&&(r=t.length-n+e);var o,i=r-e;if(this===t&&e<n&&n<r)for(o=i-1;o>=0;--o)t[o+n]=this[o+e];else if(i<1e3||!s.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+n]=this[o+e];else Uint8Array.prototype.set.call(t,this.subarray(e,e+i),n);return i},s.prototype.fill=function(t,n,e,r){if("string"==typeof t){if("string"==typeof n?(r=n,n=0,e=this.length):"string"==typeof e&&(r=e,e=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(n<0||this.length<n||this.length<e)throw new RangeError("Out of range index");if(e<=n)return this;var i;if(n>>>=0,e=void 0===e?this.length:e>>>0,t||(t=0),"number"==typeof t)for(i=n;i<e;++i)this[i]=t;else{var u=s.isBuffer(t)?t:D(new s(t,r).toString()),a=u.length;for(i=0;i<e-n;++i)this[i+n]=u[i%a]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function F(t){return t<16?"0"+t.toString(16):t.toString(16)}function D(t,n){var e;n=n||1/0;for(var r=t.length,o=null,i=[],u=0;u<r;++u){if((e=t.charCodeAt(u))>55295&&e<57344){if(!o){if(e>56319){(n-=3)>-1&&i.push(239,191,189);continue}if(u+1===r){(n-=3)>-1&&i.push(239,191,189);continue}o=e;continue}if(e<56320){(n-=3)>-1&&i.push(239,191,189),o=e;continue}e=65536+(o-55296<<10|e-56320)}else o&&(n-=3)>-1&&i.push(239,191,189);if(o=null,e<128){if((n-=1)<0)break;i.push(e)}else if(e<2048){if((n-=2)<0)break;i.push(e>>6|192,63&e|128)}else if(e<65536){if((n-=3)<0)break;i.push(e>>12|224,e>>6&63|128,63&e|128)}else{if(!(e<1114112))throw new Error("Invalid code point");if((n-=4)<0)break;i.push(e>>18|240,e>>12&63|128,e>>6&63|128,63&e|128)}}return i}function $(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function H(t,n,e,r){for(var o=0;o<r&&!(o+e>=n.length||o>=t.length);++o)n[o+e]=t[o];return o}}).call(this,e(3))},function(t,n,e){"use strict";n.byteLength=function(t){var n=f(t),e=n[0],r=n[1];return 3*(e+r)/4-r},n.toByteArray=function(t){var n,e,r=f(t),u=r[0],a=r[1],s=new i(function(t,n,e){return 3*(n+e)/4-e}(0,u,a)),c=0,l=a>0?u-4:u;for(e=0;e<l;e+=4)n=o[t.charCodeAt(e)]<<18|o[t.charCodeAt(e+1)]<<12|o[t.charCodeAt(e+2)]<<6|o[t.charCodeAt(e+3)],s[c++]=n>>16&255,s[c++]=n>>8&255,s[c++]=255&n;2===a&&(n=o[t.charCodeAt(e)]<<2|o[t.charCodeAt(e+1)]>>4,s[c++]=255&n);1===a&&(n=o[t.charCodeAt(e)]<<10|o[t.charCodeAt(e+1)]<<4|o[t.charCodeAt(e+2)]>>2,s[c++]=n>>8&255,s[c++]=255&n);return s},n.fromByteArray=function(t){for(var n,e=t.length,o=e%3,i=[],u=0,a=e-o;u<a;u+=16383)i.push(c(t,u,u+16383>a?a:u+16383));1===o?(n=t[e-1],i.push(r[n>>2]+r[n<<4&63]+"==")):2===o&&(n=(t[e-2]<<8)+t[e-1],i.push(r[n>>10]+r[n>>4&63]+r[n<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,s=u.length;a<s;++a)r[a]=u[a],o[u.charCodeAt(a)]=a;function f(t){var n=t.length;if(n%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var e=t.indexOf("=");return-1===e&&(e=n),[e,e===n?0:4-e%4]}function c(t,n,e){for(var o,i,u=[],a=n;a<e;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),u.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return u.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,n){n.read=function(t,n,e,r,o){var i,u,a=8*o-r-1,s=(1<<a)-1,f=s>>1,c=-7,l=e?o-1:0,h=e?-1:1,p=t[n+l];for(l+=h,i=p&(1<<-c)-1,p>>=-c,c+=a;c>0;i=256*i+t[n+l],l+=h,c-=8);for(u=i&(1<<-c)-1,i>>=-c,c+=r;c>0;u=256*u+t[n+l],l+=h,c-=8);if(0===i)i=1-f;else{if(i===s)return u?NaN:1/0*(p?-1:1);u+=Math.pow(2,r),i-=f}return(p?-1:1)*u*Math.pow(2,i-r)},n.write=function(t,n,e,r,o,i){var u,a,s,f=8*i-o-1,c=(1<<f)-1,l=c>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:i-1,g=r?1:-1,y=n<0||0===n&&1/n<0?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(a=isNaN(n)?1:0,u=c):(u=Math.floor(Math.log(n)/Math.LN2),n*(s=Math.pow(2,-u))<1&&(u--,s*=2),(n+=u+l>=1?h/s:h*Math.pow(2,1-l))*s>=2&&(u++,s/=2),u+l>=c?(a=0,u=c):u+l>=1?(a=(n*s-1)*Math.pow(2,o),u+=l):(a=n*Math.pow(2,l-1)*Math.pow(2,o),u=0));o>=8;t[e+p]=255&a,p+=g,a/=256,o-=8);for(u=u<<o|a,f+=o;f>0;t[e+p]=255&u,p+=g,u/=256,f-=8);t[e+p-g]|=128*y}},function(t,n){var e={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==e.call(t)}},function(t,n,e){"use strict";e.r(n);var r=e(1),o=e.n(r),i=e(5),u=e.n(i);class a{constructor(t,n,e,r){this.a=t,this.b=n,this.c=e,this.d=r}calculateCoefficients(t,n=0,e=.5){const r=t[0],o=t[1],i=t[2],u=t[3],a=Math.pow(this.distance(r,o),e),s=Math.pow(this.distance(o,i),e),f=Math.pow(this.distance(i,u),e),c={x:(1-n)*(i.x-o.x+s*((o.x-r.x)/a-(i.x-r.x)/(a+s))),y:(1-n)*(i.y-o.y+s*((o.y-r.y)/a-(i.y-r.y)/(a+s)))},l=(1-n)*(i.x-o.x+s*((u.x-i.x)/f-(u.x-o.x)/(s+f))),h=(1-n)*(i.y-o.y+s*((u.y-i.y)/f-(u.y-o.y)/(s+f)));this.a={x:2*(o.x-i.x)+c.x+l,y:2*(o.y-i.y)+c.y+h},this.b={x:-3*(o.x-i.x)-c.x-c.x-l,y:-3*(o.y-i.y)-c.y-c.y-h},this.c=c,this.d=o}evaluate(t){return{x:t.map(t=>this.a.x*Math.pow(t,3)+this.b.x*Math.pow(t,2)+this.c.x*t+this.d.x),y:t.map(t=>this.a.y*Math.pow(t,3)+this.b.y*Math.pow(t,2)+this.c.y*t+this.d.y)}}getCoefficients(){return{a:this.a,b:this.b,c:this.c,d:this.d}}distance(t,n){return Math.sqrt(Math.pow(t.x-n.x,2)+Math.pow(t.y-n.y,2))}}var s=e(15),f=e.n(s);function c(t){const n=t.ctx,e=t.config,r=t.canvas.height-e.margin,i=t.canvas.width-e.margin;n.strokeStyle=e.foregroundColour,n.fillStyle=e.foregroundColour,n.lineWidth=e.axisThickness,n.beginPath(),n.moveTo(e.margin,r),n.lineTo(i,r),n.lineTo(i-e.arrowOffset,r-e.arrowOffset),n.moveTo(i,r),n.lineTo(i-e.arrowOffset,r+e.arrowOffset),n.stroke(),n.font=`normal bold ${e.axisFontSize}px 'Calibri', sans-serif`,n.fillText("t",i-e.arrowOffset,r+4*e.arrowOffset),function(t,n){const e=t.ctx,r=t.config;e.font=`normal normal ${r.tickFontSize}px 'Calibri', sans-serif`,e.textAlign="center";let i=1/r.nTicks,u=o()(0,1+i,i),a=t.plotWidth/r.nTicks,s=r.margin;for(const t of u)e.fillText(t.toFixed(2),s,n+4*r.arrowOffset),e.moveTo(s,n),e.lineTo(s,n+r.tickHeight),e.stroke(),s+=a}(t,r);const u=t.canvas.height-e.margin;n.beginPath(),n.lineWidth=e.axisThickness,n.moveTo(e.margin,u),n.lineTo(e.margin,e.margin),n.lineTo(e.margin-e.arrowOffset,e.margin+e.arrowOffset),n.moveTo(e.margin,e.margin),n.lineTo(e.margin+e.arrowOffset,e.margin+e.arrowOffset),n.stroke(),n.font=`normal bold ${e.axisFontSize}px 'Calibri', sans-serif`,n.fillText("y",e.margin-4*e.arrowOffset,e.margin+e.arrowOffset),function(t,n){const e=t.ctx,r=t.config;e.font=`normal normal ${r.tickFontSize}px 'Calibri', sans-serif`,e.textAlign="center",e.textBaseline="middle";let i=t.maxY/r.nTicks,u=o()(0,t.maxY+i,i),a=t.plotHeight/r.nTicks,s=r.margin+t.plotHeight+r.arrowLength+r.axisCutoff;for(const t of u)e.fillText(t.toFixed(2),n-4*r.arrowOffset,s),e.moveTo(n,s),e.lineTo(n-r.tickHeight,s),e.stroke(),s-=a}(t,e.margin)}function l(t,n){const e=t.ctx,r=t.config;e.fillStyle=r.tooltipBackground;let{x:o,y:i}=h(t,n.x,n.y);!function(t,n,e,r,o,i){t.beginPath(),t.moveTo(n,e+i),t.lineTo(n,e+o-i),t.arcTo(n,e+o,n+i,e+o,i),t.lineTo(n+r-i,e+o),t.arcTo(n+r,e+o,n+r,e+o-i,i),t.lineTo(n+r,e+i),t.arcTo(n+r,e,n+r-i,e,i),t.lineTo(n+i,e),t.arcTo(n,e,n,e+i,i),t.fill()}(e,o-=r.tooltipWidth/2,i-=r.pointRadius+r.tooltipMargin,r.tooltipWidth,r.tooltipHeight,r.tooltipRadius);const u=`(${n.x.toFixed(2)}, ${n.y.toFixed(2)})`;o+=r.tooltipWidth/2,i+=r.tooltipHeight/2,e.textBaseline="middle",e.fillStyle=r.tooltipForeground,e.strokeStyle=r.tooltipForeground,e.font=`normal normal ${r.tooltipFontSize}px 'Calibri', sans-serif`,e.fillText(u,o,i)}function h(t,n,e){const r=n=>t.xOffset+n*t.xScale,o=n=>t.yOffset-n*t.yScale;return Array.isArray(n)&&Array.isArray(e)?{x:n.map(r),y:e.map(o)}:"number"==typeof n&&"number"==typeof e?{x:r(n),y:o(e)}:void 0}var p=e(16),g=e(0);var y={ISerialisedState:g.iface([],{maxY:"number",tension:"number",alpha:"number",points:g.array("IPoint")})};var d={IPoint:g.iface([],{x:"number",y:"number"}),IPointList:g.iface([],{x:g.array("number"),y:g.array("number")})};const v={ctx:void 0,canvas:void 0,maxY:1,x:[],y:[],xScale:1,xOffset:0,yScale:1,yOffset:0,plotWidth:0,plotHeight:0,points:[{x:.12,y:.67},{x:.01,y:.01},{x:.15,y:.3},{x:.25,y:1},{x:.5,y:1},{x:.6,y:0},{x:.9,y:.9}],pointIdxBeingDragged:-1,pointIdxHoveredOn:-1,segments:[],tension:0,alpha:.5,segmentsElement:void 0,contextMenuVisible:!1,contextMenu:void 0,contextMenuPointIdx:-1,contextMenuPoint:void 0,config:new class{constructor(t){this._cfg=t}get arrowLength(){return this._cfg.arrowLength*window.devicePixelRatio}get arrowOffset(){return this._cfg.arrowOffset*window.devicePixelRatio}get axisCutoff(){return this._cfg.axisCutoff*window.devicePixelRatio}get axisThickness(){return this._cfg.axisThickness*window.devicePixelRatio}get axisFontSize(){return this._cfg.axisFontSize*window.devicePixelRatio}get foregroundColour(){return this._cfg.foregroundColour}get lineColour(){return this._cfg.lineColour}get lineThickness(){return this._cfg.lineThickness*window.devicePixelRatio}get margin(){return this._cfg.margin*window.devicePixelRatio}get nTicks(){return this._cfg.nTicks}get pointColour(){return this._cfg.pointColour}get controlPointColour(){return this._cfg.controlPointColour}get pointRadius(){return this._cfg.pointRadius*window.devicePixelRatio}get tickHeight(){return this._cfg.tickHeight*window.devicePixelRatio}get tickFontSize(){return this._cfg.tickFontSize*window.devicePixelRatio}get tooltipBackground(){return this._cfg.tooltipBackground}get tooltipForeground(){return this._cfg.tooltipForeground}get tooltipHeight(){return this._cfg.tooltipHeight*window.devicePixelRatio}get tooltipMargin(){return this._cfg.tooltipMargin*window.devicePixelRatio}get tooltipFontSize(){return this._cfg.tooltipFontSize*window.devicePixelRatio}get tooltipRadius(){return this._cfg.tooltipRadius*window.devicePixelRatio}get tooltipWidth(){return this._cfg.tooltipWidth*window.devicePixelRatio}}({margin:50,arrowOffset:8,arrowLength:8/Math.sqrt(2),axisCutoff:25,axisThickness:1,axisFontSize:20,tickHeight:8,tickFontSize:16,nTicks:5,lineColour:"#bc5090",lineThickness:2.5,pointColour:"#82929f78",controlPointColour:"#57467b78",pointRadius:14,foregroundColour:"#cecccc",tooltipWidth:105,tooltipHeight:40,tooltipRadius:5,tooltipMargin:45,tooltipFontSize:18,tooltipBackground:"#e5cdc8",tooltipForeground:"#913d88"})};function m(){!function(){const t=v.config,n=window.devicePixelRatio,e=v.canvas.getBoundingClientRect();v.canvas.width=Math.round(e.right*n)-Math.round(e.left*n),v.canvas.height=v.canvas.offsetHeight*n,v.plotWidth=v.canvas.width-2*t.margin-t.axisCutoff-t.arrowLength,v.plotHeight=v.canvas.height-2*t.margin-t.axisCutoff-t.arrowLength,v.xScale=v.plotWidth/u()([u()(v.x),1]),v.xOffset=t.margin,v.yScale=v.plotHeight/v.maxY,v.yOffset=v.plotHeight+t.margin+t.axisCutoff+t.arrowLength}(),c(v),function(){if(v.x=v.y=[],!v.segments.length)return;const t=o()(0,1,.01);for(const n of v.segments){const{x:e,y:r}=n.evaluate(t);v.x=v.x.concat(e),v.y=v.y.concat(r)}}(),function(t){const n=t.ctx,{x:e,y:r}=h(t,t.x,t.y);n.moveTo(e[0],r[0]),n.beginPath(),n.strokeStyle=t.config.lineColour,n.lineWidth=t.config.lineThickness;for(const[t,o]of f()(e,r))n.lineTo(t,o);n.stroke()}(v),function(t){const n=t.ctx;for(const[e,r]of t.points.entries()){const o=t.points.length>=4&&(0===e||e===t.points.length-1);n.beginPath();const{x:i,y:u}=h(t,r.x,r.y);n.arc(i,u,t.config.pointRadius,0,2*Math.PI),n.fillStyle=o?t.config.controlPointColour:t.config.pointColour,n.fill()}}(v),-1!==v.pointIdxBeingDragged?l(v,v.points[v.pointIdxBeingDragged]):-1!==v.pointIdxHoveredOn&&l(v,v.points[v.pointIdxHoveredOn]),requestAnimationFrame(m)}function w(t){const n=v.config.pointRadius,e=window.devicePixelRatio,r=t instanceof MouseEvent?t.clientX:t.touches[0].clientX,o=t instanceof MouseEvent?t.clientY:t.touches[0].clientY,i=function(t,n,e){const r=n=>(n-t.xOffset)/t.xScale,o=n=>-(n-t.yOffset)/t.yScale;return Array.isArray(n)&&Array.isArray(e)?{x:n.map(r),y:e.map(o)}:"number"==typeof n&&"number"==typeof e?{x:r(n),y:o(e)}:void 0}(v,r*e,o*e);return{pointIdx:v.points.findIndex(t=>Math.abs(t.x-i.x)<=1.25*n/v.xScale&&Math.abs(t.y-i.y)<=1.25*n/v.yScale),pointCentre:i}}function x(t){if(t instanceof MouseEvent&&2===t.button)return;if(v.contextMenuVisible)return void M(!1);const{pointIdx:n,pointCentre:e}=w(t);-1!==n?v.pointIdxBeingDragged=n:(b(e),C())}function b(t){v.points.length>=4?v.points.splice(v.points.length-1,0,t):v.points.push(t)}function T(t){const{pointIdx:n,pointCentre:e}=w(t);-1===v.pointIdxBeingDragged?v.pointIdxHoveredOn=n:(v.points[v.pointIdxBeingDragged]=e,C())}function _(t){void 0!==v.pointIdxBeingDragged&&(v.pointIdxBeingDragged=-1,v.pointIdxHoveredOn=-1,C())}function E(t){v.tension=Number(t.target.value),C()}function A(t){v.alpha=Number(t.target.value),C()}function P(t,n){const e=t.innerText;t.innerText=n,t.disabled=!0,setTimeout(()=>{t.innerText=e,t.disabled=!1},1e3)}function R(t,n){const e=n?k():`const segments = [\n    ${v.segments.map(t=>`new Segment(\n        {x: ${t.a.x}, y: ${t.a.y}},\n        {x: ${t.b.x}, y: ${t.b.y}},\n        {x: ${t.c.x}, y: ${t.c.y}},\n        {x: ${t.d.x}, y: ${t.d.y}}\n    )`).join(",\n    ")}\n];`;v.segments.length&&navigator.clipboard.writeText(e).then(()=>P(t,"Copied!")).catch(()=>P(t,"Failed to copy"))}function O(){R(document.getElementById("copyJSON"),!0)}function S(){R(document.getElementById("copyTS"),!1)}function C(){const t=v.points;if(t.length<4)return v.segments=[],void(v.segmentsElement.innerText="");const n=[];for(let e=3;e<t.length;e++)n.push(t.slice(e-3,e+1));v.segments=n.map(t=>{const n=new a;return n.calculateCoefficients(t,v.tension,v.alpha),n}),v.segmentsElement.innerText=k()}function k(){return JSON.stringify(v.segments.map(t=>t.getCoefficients()),null,2)}function B(t){t.preventDefault();const{pointIdx:n,pointCentre:e}=w(t);v.contextMenu.style.left=`${t.pageX}px`,v.contextMenu.style.top=`${t.pageY}px`,v.contextMenuPointIdx=n,v.contextMenuPoint=e,document.getElementById("removePoint").style.display=-1!==n?"block":"none",document.getElementById("addPoint").style.display=-1!==n?"none":"block",M(!0)}function M(t){v.contextMenu.style.display=t?"block":"none",v.contextMenuVisible=t}function I(t){if(-1!==v.contextMenuPointIdx)return void M(!1);const n=v.contextMenuPoint,e=v.points.findIndex(t=>t.x>n.x);-1!==e?v.points.splice(e,0,n):b(n),C(),M(!1)}function U(t){const n=v.contextMenuPointIdx;-1!==n&&(v.points.splice(n,1),C()),M(!1)}function j(){v.points=[],C(),M(!1)}function L(){const t=document.createElement("input");t.type="file",t.onchange=t=>{const n=t.target.files[0],e=new FileReader;e.readAsText(n,"UTF-8"),e.onload=t=>{const n=t.target.result,e=JSON.parse(n),{ISerialisedState:r}=Object(g.createCheckers)(y,d);if(r.strictTest(e)){!function(t){v.maxY=t.maxY,document.getElementById("maxY").valueAsNumber=t.maxY,v.tension=t.tension,document.getElementById("tension").valueAsNumber=t.tension,v.alpha=t.alpha,document.getElementById("alpha").valueAsNumber=t.alpha,v.points=t.points}(e),C()}else{P(document.getElementById("import"),"Corrupted JSON")}}},t.click()}function Y(){const t={maxY:v.maxY,tension:v.tension,alpha:v.alpha,points:v.points},n=JSON.stringify(t,null,2),e=new Blob([n],{type:"text/plain;charset=utf-8"});Object(p.saveAs)(e,"splicer.json",{autoBom:!0})}window.onload=function(){v.canvas=document.getElementById("plot"),v.ctx=v.canvas.getContext("2d"),document.getElementById("maxY").oninput=t=>v.maxY=Number(t.target.value),document.getElementById("tension").oninput=E,document.getElementById("alpha").oninput=A,v.segmentsElement=document.getElementById("segments"),document.getElementById("copyJSON").onclick=O,document.getElementById("copyTS").onclick=S,document.getElementById("import").onclick=L,document.getElementById("export").onclick=Y,v.contextMenu=document.getElementById("menu"),v.canvas.oncontextmenu=B,document.getElementById("addPoint").onclick=I,document.getElementById("removePoint").onclick=U,document.getElementById("removeAllPoints").onclick=j,v.canvas.onmousedown=x,v.canvas.ontouchstart=x,v.canvas.onmousemove=T,v.canvas.ontouchmove=T,v.canvas.onmouseup=_,v.canvas.ontouchend=_,C(),requestAnimationFrame(m)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,