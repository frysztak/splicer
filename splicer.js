!function(t){var n={};function e(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(o,i,function(n){return t[n]}.bind(null,i));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=46)}([function(t,n,e){var o=e(12)();t.exports=o},function(t,n){t.exports=function(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}},function(t,n){t.exports=function(t){return t}},function(t,n,e){var o=e(24),i=e(25),r=e(2);t.exports=function(t){return t&&t.length?o(t,r,i):void 0}},function(t,n,e){var o=e(5),i=e(20);t.exports=function(t){return null!=t&&i(t.length)&&!o(t)}},function(t,n,e){var o=e(6),i=e(1),r="[object AsyncFunction]",c="[object Function]",a="[object GeneratorFunction]",u="[object Proxy]";t.exports=function(t){if(!i(t))return!1;var n=o(t);return n==c||n==a||n==r||n==u}},function(t,n,e){var o=e(7),i=e(18),r=e(19),c="[object Null]",a="[object Undefined]",u=o?o.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?a:c:u&&u in Object(t)?i(t):r(t)}},function(t,n,e){var o=e(8).Symbol;t.exports=o},function(t,n,e){var o=e(16),i="object"==typeof self&&self&&self.Object===Object&&self,r=o||i||Function("return this")();t.exports=r},function(t,n,e){var o=e(6),i=e(10),r="[object Symbol]";t.exports=function(t){return"symbol"==typeof t||i(t)&&o(t)==r}},function(t,n){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,n,e){var o=e(26)(e(40));t.exports=o},function(t,n,e){var o=e(13),i=e(14),r=e(22);t.exports=function(t){return function(n,e,c){return c&&"number"!=typeof c&&i(n,e,c)&&(e=c=void 0),n=r(n),void 0===e?(e=n,n=0):e=r(e),c=void 0===c?n<e?1:-1:r(c),o(n,e,c,t)}}},function(t,n){var e=Math.ceil,o=Math.max;t.exports=function(t,n,i,r){for(var c=-1,a=o(e((n-t)/(i||1)),0),u=Array(a);a--;)u[r?a:++c]=t,t+=i;return u}},function(t,n,e){var o=e(15),i=e(4),r=e(21),c=e(1);t.exports=function(t,n,e){if(!c(e))return!1;var a=typeof n;return!!("number"==a?i(e)&&r(n,e.length):"string"==a&&n in e)&&o(e[n],t)}},function(t,n){t.exports=function(t,n){return t===n||t!=t&&n!=n}},function(t,n,e){(function(n){var e="object"==typeof n&&n&&n.Object===Object&&n;t.exports=e}).call(this,e(17))},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){var o=e(7),i=Object.prototype,r=i.hasOwnProperty,c=i.toString,a=o?o.toStringTag:void 0;t.exports=function(t){var n=r.call(t,a),e=t[a];try{t[a]=void 0;var o=!0}catch(t){}var i=c.call(t);return o&&(n?t[a]=e:delete t[a]),i}},function(t,n){var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},function(t,n){var e=9007199254740991;t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=e}},function(t,n){var e=9007199254740991,o=/^(?:0|[1-9]\d*)$/;t.exports=function(t,n){var i=typeof t;return!!(n=null==n?e:n)&&("number"==i||"symbol"!=i&&o.test(t))&&t>-1&&t%1==0&&t<n}},function(t,n,e){var o=e(23),i=1/0,r=17976931348623157e292;t.exports=function(t){return t?(t=o(t))===i||t===-i?(t<0?-1:1)*r:t==t?t:0:0===t?t:0}},function(t,n,e){var o=e(1),i=e(9),r=NaN,c=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,s=/^0o[0-7]+$/i,f=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(i(t))return r;if(o(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=o(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(c,"");var e=u.test(t);return e||s.test(t)?f(t.slice(2),e?2:8):a.test(t)?r:+t}},function(t,n,e){var o=e(9);t.exports=function(t,n,e){for(var i=-1,r=t.length;++i<r;){var c=t[i],a=n(c);if(null!=a&&(void 0===u?a==a&&!o(a):e(a,u)))var u=a,s=c}return s}},function(t,n){t.exports=function(t,n){return t>n}},function(t,n,e){var o=e(2),i=e(27),r=e(29);t.exports=function(t,n){return r(i(t,n,o),t+"")}},function(t,n,e){var o=e(28),i=Math.max;t.exports=function(t,n,e){return n=i(void 0===n?t.length-1:n,0),function(){for(var r=arguments,c=-1,a=i(r.length-n,0),u=Array(a);++c<a;)u[c]=r[n+c];c=-1;for(var s=Array(n+1);++c<n;)s[c]=r[c];return s[n]=e(u),o(t,this,s)}}},function(t,n){t.exports=function(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}},function(t,n,e){var o=e(30),i=e(39)(o);t.exports=i},function(t,n,e){var o=e(31),i=e(32),r=e(2),c=i?function(t,n){return i(t,"toString",{configurable:!0,enumerable:!1,value:o(n),writable:!0})}:r;t.exports=c},function(t,n){t.exports=function(t){return function(){return t}}},function(t,n,e){var o=e(33),i=function(){try{var t=o(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},function(t,n,e){var o=e(34),i=e(38);t.exports=function(t,n){var e=i(t,n);return o(e)?e:void 0}},function(t,n,e){var o=e(5),i=e(35),r=e(1),c=e(37),a=/^\[object .+?Constructor\]$/,u=Function.prototype,s=Object.prototype,f=u.toString,l=s.hasOwnProperty,p=RegExp("^"+f.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!r(t)||i(t))&&(o(t)?p:a).test(c(t))}},function(t,n,e){var o,i=e(36),r=(o=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";t.exports=function(t){return!!r&&r in t}},function(t,n,e){var o=e(8)["__core-js_shared__"];t.exports=o},function(t,n){var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,n){t.exports=function(t,n){return null==t?void 0:t[n]}},function(t,n){var e=800,o=16,i=Date.now;t.exports=function(t){var n=0,r=0;return function(){var c=i(),a=o-(c-r);if(r=c,a>0){if(++n>=e)return arguments[0]}else n=0;return t.apply(void 0,arguments)}}},function(t,n,e){var o=e(41),i=e(42),r=e(43),c=e(44),a=e(45),u=Math.max;t.exports=function(t){if(!t||!t.length)return[];var n=0;return t=o(t,function(t){if(a(t))return n=u(t.length,n),!0}),c(n,function(n){return i(t,r(n))})}},function(t,n){t.exports=function(t,n){for(var e=-1,o=null==t?0:t.length,i=0,r=[];++e<o;){var c=t[e];n(c,e,t)&&(r[i++]=c)}return r}},function(t,n){t.exports=function(t,n){for(var e=-1,o=null==t?0:t.length,i=Array(o);++e<o;)i[e]=n(t[e],e,t);return i}},function(t,n){t.exports=function(t){return function(n){return null==n?void 0:n[t]}}},function(t,n){t.exports=function(t,n){for(var e=-1,o=Array(t);++e<t;)o[e]=n(e);return o}},function(t,n,e){var o=e(4),i=e(10);t.exports=function(t){return i(t)&&o(t)}},function(t,n,e){"use strict";e.r(n);var o=e(0),i=e.n(o),r=e(3),c=e.n(r);class a{constructor(t,n=0,e=.5){const o=t[0],i=t[1],r=t[2],c=t[3],a=Math.pow(this.distance(o,i),e),u=Math.pow(this.distance(i,r),e),s=Math.pow(this.distance(r,c),e),f={x:(1-n)*(r.x-i.x+u*((i.x-o.x)/a-(r.x-o.x)/(a+u))),y:(1-n)*(r.y-i.y+u*((i.y-o.y)/a-(r.y-o.y)/(a+u)))},l=(1-n)*(r.x-i.x+u*((c.x-r.x)/s-(c.x-i.x)/(u+s))),p=(1-n)*(r.y-i.y+u*((c.y-r.y)/s-(c.y-i.y)/(u+s)));this.a={x:2*(i.x-r.x)+f.x+l,y:2*(i.y-r.y)+f.y+p},this.b={x:-3*(i.x-r.x)-f.x-f.x-l,y:-3*(i.y-r.y)-f.y-f.y-p},this.c=f,this.d=i}evaluate(t){return{x:t.map(t=>this.a.x*Math.pow(t,3)+this.b.x*Math.pow(t,2)+this.c.x*t+this.d.x),y:t.map(t=>this.a.y*Math.pow(t,3)+this.b.y*Math.pow(t,2)+this.c.y*t+this.d.y)}}getCoefficients(){return{a:this.a,b:this.b,c:this.c,d:this.d}}distance(t,n){return Math.sqrt(Math.pow(t.x-n.x,2)+Math.pow(t.y-n.y,2))}}var u=e(11),s=e.n(u);function f(t){const n=t.ctx,e=t.config,o=t.canvas.height-e.margin,r=t.canvas.width-e.margin;n.strokeStyle=e.foregroundColour,n.fillStyle=e.foregroundColour,n.lineWidth=e.axisThickness,n.beginPath(),n.moveTo(e.margin,o),n.lineTo(r,o),n.lineTo(r-e.arrowOffset,o-e.arrowOffset),n.moveTo(r,o),n.lineTo(r-e.arrowOffset,o+e.arrowOffset),n.stroke(),n.font=`normal bold ${e.axisFontSize}px 'Calibri', sans-serif`,n.fillText("t",r-e.arrowOffset,o+4*e.arrowOffset),function(t,n){const e=t.ctx,o=t.config;e.font=`normal normal ${o.tickFontSize}px 'Calibri', sans-serif`,e.textAlign="center";let r=1/o.nTicks,c=i()(0,1+r,r),a=t.plotWidth/o.nTicks,u=o.margin;for(const t of c)e.fillText(t.toFixed(2),u,n+4*o.arrowOffset),e.moveTo(u,n),e.lineTo(u,n+o.tickHeight),e.stroke(),u+=a}(t,o);const c=t.canvas.height-e.margin;n.beginPath(),n.lineWidth=e.axisThickness,n.moveTo(e.margin,c),n.lineTo(e.margin,e.margin),n.lineTo(e.margin-e.arrowOffset,e.margin+e.arrowOffset),n.moveTo(e.margin,e.margin),n.lineTo(e.margin+e.arrowOffset,e.margin+e.arrowOffset),n.stroke(),n.font=`normal bold ${e.axisFontSize}px 'Calibri', sans-serif`,n.fillText("y",e.margin-4*e.arrowOffset,e.margin+e.arrowOffset),function(t,n){const e=t.ctx,o=t.config;e.font=`normal normal ${o.tickFontSize}px 'Calibri', sans-serif`,e.textAlign="center",e.textBaseline="middle";let r=t.maxY/o.nTicks,c=i()(0,t.maxY+r,r),a=t.plotHeight/o.nTicks,u=o.margin+t.plotHeight+o.arrowLength+o.axisCutoff;for(const t of c)e.fillText(t.toFixed(2),n-4*o.arrowOffset,u),e.moveTo(n,u),e.lineTo(n-o.tickHeight,u),e.stroke(),u-=a}(t,e.margin)}function l(t,n){const e=t.ctx,o=t.config;e.fillStyle=o.tooltipBackground;let{x:i,y:r}=p(t,n.x,n.y);!function(t,n,e,o,i,r){t.beginPath(),t.moveTo(n,e+r),t.lineTo(n,e+i-r),t.arcTo(n,e+i,n+r,e+i,r),t.lineTo(n+o-r,e+i),t.arcTo(n+o,e+i,n+o,e+i-r,r),t.lineTo(n+o,e+r),t.arcTo(n+o,e,n+o-r,e,r),t.lineTo(n+r,e),t.arcTo(n,e,n,e+r,r),t.fill()}(e,i-=o.tooltipWidth/2,r-=o.pointRadius+o.tooltipMargin,o.tooltipWidth,o.tooltipHeight,o.tooltipRadius);const c=`(${n.x.toFixed(2)}, ${n.y.toFixed(2)})`;i+=o.tooltipWidth/2,r+=o.tooltipHeight/2,e.textBaseline="middle",e.fillStyle=o.tooltipForeground,e.strokeStyle=o.tooltipForeground,e.font=`normal normal ${o.tooltipFontSize}px 'Calibri', sans-serif`,e.fillText(c,i,r)}function p(t,n,e){const o=n=>t.xOffset+n*t.xScale,i=n=>t.yOffset-n*t.yScale;return Array.isArray(n)&&Array.isArray(e)?{x:n.map(o),y:e.map(i)}:"number"==typeof n&&"number"==typeof e?{x:o(n),y:i(e)}:void 0}const x={ctx:void 0,canvas:void 0,maxY:1,x:[],y:[],xScale:1,xOffset:0,yScale:1,yOffset:0,plotWidth:0,plotHeight:0,points:[{x:.12,y:.67},{x:.01,y:.01},{x:.15,y:.3},{x:.25,y:1},{x:.5,y:1},{x:.6,y:0},{x:.9,y:.9}],pointIdxBeingDragged:-1,pointIdxHoveredOn:-1,segments:[],tension:0,segmentsElement:void 0,contextMenuVisible:!1,contextMenu:void 0,contextMenuPointIdx:-1,contextMenuPoint:void 0,config:new class{constructor(t){this._cfg=t}get arrowLength(){return this._cfg.arrowLength*window.devicePixelRatio}get arrowOffset(){return this._cfg.arrowOffset*window.devicePixelRatio}get axisCutoff(){return this._cfg.axisCutoff*window.devicePixelRatio}get axisThickness(){return this._cfg.axisThickness*window.devicePixelRatio}get axisFontSize(){return this._cfg.axisFontSize*window.devicePixelRatio}get foregroundColour(){return this._cfg.foregroundColour}get lineColour(){return this._cfg.lineColour}get lineThickness(){return this._cfg.lineThickness*window.devicePixelRatio}get margin(){return this._cfg.margin*window.devicePixelRatio}get nTicks(){return this._cfg.nTicks}get pointColour(){return this._cfg.pointColour}get controlPointColour(){return this._cfg.controlPointColour}get pointRadius(){return this._cfg.pointRadius*window.devicePixelRatio}get tickHeight(){return this._cfg.tickHeight*window.devicePixelRatio}get tickFontSize(){return this._cfg.tickFontSize*window.devicePixelRatio}get tooltipBackground(){return this._cfg.tooltipBackground}get tooltipForeground(){return this._cfg.tooltipForeground}get tooltipHeight(){return this._cfg.tooltipHeight*window.devicePixelRatio}get tooltipMargin(){return this._cfg.tooltipMargin*window.devicePixelRatio}get tooltipFontSize(){return this._cfg.tooltipFontSize*window.devicePixelRatio}get tooltipRadius(){return this._cfg.tooltipRadius*window.devicePixelRatio}get tooltipWidth(){return this._cfg.tooltipWidth*window.devicePixelRatio}}({margin:50,arrowOffset:8,arrowLength:8/Math.sqrt(2),axisCutoff:25,axisThickness:1,axisFontSize:20,tickHeight:8,tickFontSize:16,nTicks:5,lineColour:"#bc5090",lineThickness:2.5,pointColour:"#82929f78",controlPointColour:"#57467b78",pointRadius:14,foregroundColour:"#cecccc",tooltipWidth:105,tooltipHeight:40,tooltipRadius:5,tooltipMargin:45,tooltipFontSize:18,tooltipBackground:"#e5cdc8",tooltipForeground:"#913d88"})};function g(){!function(){const t=x.config,n=window.devicePixelRatio,e=x.canvas.getBoundingClientRect();x.canvas.width=Math.round(e.right*n)-Math.round(e.left*n),x.canvas.height=x.canvas.offsetHeight*n,x.plotWidth=x.canvas.width-2*t.margin-t.axisCutoff-t.arrowLength,x.plotHeight=x.canvas.height-2*t.margin-t.axisCutoff-t.arrowLength,x.xScale=x.plotWidth/c()([c()(x.x),1]),x.xOffset=t.margin,x.yScale=x.plotHeight/x.maxY,x.yOffset=x.plotHeight+t.margin+t.axisCutoff+t.arrowLength}(),f(x),function(){if(x.x=x.y=[],!x.segments.length)return;const t=i()(0,1,.01);for(const n of x.segments){const{x:e,y:o}=n.evaluate(t);x.x=x.x.concat(e),x.y=x.y.concat(o)}}(),function(t){const n=t.ctx,{x:e,y:o}=p(t,t.x,t.y);n.moveTo(e[0],o[0]),n.beginPath(),n.strokeStyle=t.config.lineColour,n.lineWidth=t.config.lineThickness;for(const[t,i]of s()(e,o))n.lineTo(t,i);n.stroke()}(x),function(t){const n=t.ctx;for(const[e,o]of t.points.entries()){const i=t.points.length>=4&&(0===e||e===t.points.length-1);n.beginPath();const{x:r,y:c}=p(t,o.x,o.y);n.arc(r,c,t.config.pointRadius,0,2*Math.PI),n.fillStyle=i?t.config.controlPointColour:t.config.pointColour,n.fill()}}(x),-1!==x.pointIdxBeingDragged?l(x,x.points[x.pointIdxBeingDragged]):-1!==x.pointIdxHoveredOn&&l(x,x.points[x.pointIdxHoveredOn]),requestAnimationFrame(g)}function d(t){const n=x.config.pointRadius,e=window.devicePixelRatio,o=t instanceof MouseEvent?t.clientX:t.touches[0].clientX,i=t instanceof MouseEvent?t.clientY:t.touches[0].clientY,r=function(t,n,e){const o=n=>(n-t.xOffset)/t.xScale,i=n=>-(n-t.yOffset)/t.yScale;return Array.isArray(n)&&Array.isArray(e)?{x:n.map(o),y:e.map(i)}:"number"==typeof n&&"number"==typeof e?{x:o(n),y:i(e)}:void 0}(x,o*e,i*e);return{pointIdx:x.points.findIndex(t=>Math.abs(t.x-r.x)<=1.25*n/x.xScale&&Math.abs(t.y-r.y)<=1.25*n/x.yScale),pointCentre:r}}function h(t){if(t instanceof MouseEvent&&2===t.button)return;if(x.contextMenuVisible)return void k(!1);const{pointIdx:n,pointCentre:e}=d(t);-1!==n?x.pointIdxBeingDragged=n:(y(e),T())}function y(t){x.points.length>=4?x.points.splice(x.points.length-1,0,t):x.points.push(t)}function v(t){const{pointIdx:n,pointCentre:e}=d(t);-1===x.pointIdxBeingDragged?x.pointIdxHoveredOn=n:(x.points[x.pointIdxBeingDragged]=e,T())}function m(t){void 0!==x.pointIdxBeingDragged&&(x.pointIdxBeingDragged=-1,x.pointIdxHoveredOn=-1,T())}function w(t){x.tension=Number(t.target.value),T()}function b(){if(x.segments.length){const t=document.getElementById("copy");navigator.clipboard.writeText(O()).then(()=>{t.innerText="Copied!",setTimeout(()=>t.innerText="Copy",1e3)}).catch(()=>{t.innerText="Failed to copy",setTimeout(()=>t.innerText="Copy",1e3)})}}function T(){const t=x.points;if(t.length<4)return x.segments=[],void(x.segmentsElement.innerText="");const n=[];for(let e=3;e<t.length;e++)n.push(t.slice(e-3,e+1));x.segments=n.map(t=>new a(t,x.tension)),x.segmentsElement.innerText=O()}function O(){return JSON.stringify(x.segments.map(t=>t.getCoefficients()),null,2)}function P(t){t.preventDefault();const{pointIdx:n,pointCentre:e}=d(t);x.contextMenu.style.left=`${t.pageX}px`,x.contextMenu.style.top=`${t.pageY}px`,x.contextMenuPointIdx=n,x.contextMenuPoint=e,document.getElementById("removePoint").style.display=-1!==n?"block":"none",document.getElementById("addPoint").style.display=-1!==n?"none":"block",k(!0)}function k(t){x.contextMenu.style.display=t?"block":"none",x.contextMenuVisible=t}function S(t){if(-1!==x.contextMenuPointIdx)return void k(!1);const n=x.contextMenuPoint,e=x.points.findIndex(t=>t.x>n.x);-1!==e?x.points.splice(e,0,n):y(n),T(),k(!1)}function M(t){const n=x.contextMenuPointIdx;-1!==n&&(x.points.splice(n,1),T()),k(!1)}function C(){x.points=[],T(),k(!1)}window.onload=function(){x.canvas=document.getElementById("plot"),x.ctx=x.canvas.getContext("2d"),document.getElementById("maxY").oninput=t=>x.maxY=Number(t.target.value),document.getElementById("tension").oninput=w,x.segmentsElement=document.getElementById("segments"),document.getElementById("copy").onclick=b,x.contextMenu=document.getElementById("menu"),x.canvas.oncontextmenu=P,document.getElementById("addPoint").onclick=S,document.getElementById("removePoint").onclick=M,document.getElementById("removeAllPoints").onclick=C,x.canvas.onmousedown=h,x.canvas.ontouchstart=h,x.canvas.onmousemove=v,x.canvas.ontouchmove=v,x.canvas.onmouseup=m,x.canvas.ontouchend=m,T(),requestAnimationFrame(g)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,